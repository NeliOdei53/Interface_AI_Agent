document.addEventListener('DOMContentLoaded', () => {
    const userInput = document.getElementById('userInput'); // Now a textarea
    const sendButton = document.getElementById('sendButton');
    const chatMessages = document.getElementById('chatMessages');
    const showPredefinedBtn = document.getElementById('show-predefined-btn');
    const predefinedQuestionsPopup = document.getElementById('predefined-questions-popup');
    const predefinedQuestionsList = document.getElementById('predefined-questions-list');
    const closePopupBtn = document.getElementById('close-popup-btn');
    const themeToggleButton = document.querySelector('.chat-header .theme-icon');
    const chatContainer = document.querySelector('.chat-container');
    const bodyElement = document.body;

    const userAvatarUrl = "/static/images/photo_2025-06-21_15-42-36.jpg"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    const assistantAvatarUrl = "/static/images/photo_2025-06-21_15-31-50.jpg"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    
    const predefinedQuestions = [
        "–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ ALT Linux?",
        "–ï—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Snap –ø–∞–∫–µ—Ç–æ–≤?",
        "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é —è–¥—Ä–∞?",
        "–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ ALT Linux?",
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å?",
        "–ú–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Steam?",
        "–ö–∞–∫–∏–µ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è?",
        "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
        "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤?",
        "–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è?"
    ];

    const MAX_TEXTAREA_HEIGHT = 150; // px, should match CSS max-height for #userInput
    const initialTextareaHeightCss = `calc(1.5em + 20px + 2px)`; // Approx 1 line, matches CSS initial height calculation

    function setTextareaHeight() {
        userInput.style.height = 'auto'; // Reset height to recalculate scrollHeight correctly
        const scrollHeight = userInput.scrollHeight;
        if (scrollHeight > MAX_TEXTAREA_HEIGHT) {
            userInput.style.height = MAX_TEXTAREA_HEIGHT + 'px';
            userInput.style.overflowY = 'auto';
        } else {
            userInput.style.height = scrollHeight + 'px';
            userInput.style.overflowY = 'hidden';
        }
    }
    
    if (userInput.value === '') { 
        userInput.style.height = initialTextareaHeightCss;
        userInput.style.overflowY = 'hidden';
    }
    setTextareaHeight(); 

    userInput.addEventListener('input', setTextareaHeight);


    function addMessage(text, sender) {
        const messageWrapper = document.createElement('div');
        messageWrapper.classList.add('message', sender);

        const avatarImg = document.createElement('img');
        avatarImg.classList.add('avatar');
        avatarImg.src = (sender === 'user') ? userAvatarUrl : assistantAvatarUrl;
        avatarImg.alt = sender;

        const messageContentDiv = document.createElement('div');
        messageContentDiv.classList.add('message-content');

        if (sender === 'assistant') {
            messageContentDiv.innerHTML = text; 
        } else {
            messageContentDiv.textContent = text;
        }

        if (sender === 'user') {
            messageWrapper.appendChild(messageContentDiv);
            messageWrapper.appendChild(avatarImg);
        } else {
            messageWrapper.appendChild(avatarImg);
            messageWrapper.appendChild(messageContentDiv);
        }
        
        chatMessages.appendChild(messageWrapper);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function sendQuestion(questionText) {
        const trimmedQuestion = questionText.trim();
        if (!trimmedQuestion) return;

        addMessage(trimmedQuestion, 'user');
        userInput.value = '';
        
        userInput.style.height = initialTextareaHeightCss; 
        setTextareaHeight();

        const processingMessageText = "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...";
        const tempAssistantMessageDiv = document.createElement('div');
        tempAssistantMessageDiv.classList.add('message', 'assistant', 'processing-message');
        tempAssistantMessageDiv.innerHTML = `
            <img class="avatar" src="${assistantAvatarUrl}" alt="assistant">
            <div class="message-content">${processingMessageText}</div>
        `;
        chatMessages.appendChild(tempAssistantMessageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;


        try {
            const response = await fetch('/ask', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question: trimmedQuestion }),
            });

            const processingMsgElement = chatMessages.querySelector('.processing-message');
            if (processingMsgElement) {
                processingMsgElement.remove();
            }

            if (!response.ok) {
                const errorData = await response.json();
                addMessage(`–û—à–∏–±–∫–∞: ${errorData.error || response.statusText}`, 'assistant');
                return;
            }

            const data = await response.json();
            addMessage(data.answer, 'assistant');
            console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
            // const lastAssistantMessage = chatMessages.querySelector('.message.assistant:last-child');
            // if (lastAssistantMessage && lastAssistantMessage.textContent.includes("–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")) {
            //    lastAssistantMessage.textContent = data.answer;
            // } else {
            //    addMessage(data.answer, 'assistant');
            // }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
            const processingMsgElement = chatMessages.querySelector('.processing-message');
            if (processingMsgElement) {
                processingMsgElement.remove();
            }
            addMessage("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.", 'assistant');
        }
    }

    sendButton.addEventListener('click', () => {
        sendQuestion(userInput.value);
        userInput.focus();
    });

    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendQuestion(userInput.value);
        }
    });

    predefinedQuestions.forEach(qText => {
        const button = document.createElement('button');
        button.textContent = qText;
        button.addEventListener('click', () => {
            userInput.value = qText;
            predefinedQuestionsPopup.classList.add('hidden');
            setTextareaHeight(); 
            userInput.focus(); 
        });
        predefinedQuestionsList.appendChild(button);
    });

    showPredefinedBtn.addEventListener('click', (event) => {
        event.stopPropagation();
        predefinedQuestionsPopup.classList.toggle('hidden');
    });
    
    closePopupBtn.addEventListener('click', () => {
        predefinedQuestionsPopup.classList.add('hidden');
    });

    document.addEventListener('click', (event) => {
        if (!predefinedQuestionsPopup.classList.contains('hidden') && 
            !predefinedQuestionsPopup.contains(event.target) && 
            event.target !== showPredefinedBtn) {
            predefinedQuestionsPopup.classList.add('hidden');
        }
    });

    function applyTheme(theme) {
        if (theme === 'light') {
            chatContainer.classList.add('light-theme');
            bodyElement.classList.add('light-theme-active');
            themeToggleButton.textContent = '‚òÄÔ∏è';
            localStorage.setItem('chatTheme', 'light');
        } else {
            chatContainer.classList.remove('light-theme');
            bodyElement.classList.remove('light-theme-active');
            themeToggleButton.textContent = 'üåô';
            localStorage.setItem('chatTheme', 'dark');
        }
    }

    themeToggleButton.addEventListener('click', () => {
        const currentTheme = chatContainer.classList.contains('light-theme') ? 'dark' : 'light';
        applyTheme(currentTheme);
    });

    const savedTheme = localStorage.getItem('chatTheme');
    applyTheme(savedTheme || 'dark'); 


    const reasoningToggle = document.getElementById('reasoningToggle');
    const reasoningToggleLabel = document.getElementById('reasoningToggleLabel');

    if (reasoningToggle && reasoningToggleLabel) { // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–∞, —Ç.–∫. —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        reasoningToggleLabel.textContent = `Reasoning: ${reasoningToggle.checked ? 'ON' : 'OFF'}`;
        reasoningToggle.addEventListener('change', function() {
            const isEnabled = this.checked;
            reasoningToggleLabel.textContent = `Reasoning: ${isEnabled ? 'ON' : 'OFF'}`;
            console.log(`Reasoning mode: ${isEnabled ? 'ON' : 'OFF'}`);
        });
    }
});